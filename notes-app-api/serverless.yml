# NOTE: update this with your service name
service: notes-app-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-${file(./.env/dev.env.json):configs.resources.tableName}
  userPoolName: ${self:custom.stage}-${file(./.env/dev.env.json):configs.resources.userPoolName}
  userPoolClientName: ${self:custom.stage}-${file(./.env/dev.env.json):configs.resources.userPoolClientName}
  identityPoolName: ${self:custom.stage}-${file(./.env/dev.env.json):configs.resources.identityPoolName}

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    CORSOrigin: ${file(./.env/dev.env.json):configs.CORSOrigin}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::GetAtt: [ NotesTable, Arn ]
    # Allow users to upload attachments to their
    # folder inside our S3 bucket
    - Effect: Allow
      Action:
        - "s3:*"
      Resource:
        - Fn::Join:
          - ""
          -
            - Fn::GetAtt: [ AttachmentsBucket, Arn ]
            - "/private/"
            - "$"
            - "{cognito-identity.amazonaws.com:sub}/*"

functions:
  get:
    environment:
      TABLE_NAME: ${self:custom.tableName}
    handler: src/notes/get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    environment:
      TABLE_NAME: ${self:custom.tableName}
    handler: src/notes/list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam
  create:
    environment:
      TABLE_NAME: ${self:custom.tableName}
    handler: src/notes/create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
  update:
    environment:
      TABLE_NAME: ${self:custom.tableName}
    handler: src/notes/update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    environment:
      TABLE_NAME: ${self:custom.tableName}
    handler: src/notes/delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  billing:
    environment:
      STRIPE_SECRET_KEY: ${file(./.env/dev.env.json):secrets.stripeSecretKey}
      PAYMENT_CURRENCY: ${file(./.env/dev.env.json):configs.paymentCurrency}
    handler: src/payments/create.main
    events:
      - http:
          path: payments
          method: post
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(./resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(./resources/dynamodb-table.yml)}
  # S3
  - ${file(./resources/s3-bucket.yml)}
  # Cognito
  - ${file(./resources/cognito-user-pool.yml)}
  # Identity Pool
  - ${file(./resources/cognito-identity-pool.yml)}
  # IAM Authenticated Role
  - ${file(./resources/iam-auth-role.yml)}
