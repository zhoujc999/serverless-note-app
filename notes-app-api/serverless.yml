# NOTE: update this with your service name
service: notes-app-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: ${file(./.env/dev.env.json):configs.dynamoDbResource}

functions:
  get:
    environment:
      tableName: ${file(./.env/dev.env.json):configs.tableName}
      CORSOrigin: ${file(./.env/dev.env.json):configs.CORSOrigin}
    handler: src/notes/get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    environment:
      tableName: ${file(./.env/dev.env.json):configs.tableName}
      CORSOrigin: ${file(./.env/dev.env.json):configs.CORSOrigin}
    handler: src/notes/list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam
  create:
    environment:
      tableName: ${file(./.env/dev.env.json):configs.tableName}
      CORSOrigin: ${file(./.env/dev.env.json):configs.CORSOrigin}
    handler: src/notes/create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
  update:
    environment:
      tableName: ${file(./.env/dev.env.json):configs.tableName}
      CORSOrigin: ${file(./.env/dev.env.json):configs.CORSOrigin}
    handler: src/notes/update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    environment:
      tableName: ${file(./.env/dev.env.json):configs.tableName}
      CORSOrigin: ${file(./.env/dev.env.json):configs.CORSOrigin}
    handler: src/notes/delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam
